#!/usr/local/bin/perl
#
# Copyright (c) 1996-2006 Verio Inc., an NTT Communications Company
# written by Rus Berrett
#
# $SMEId: local/imanager/strings/SANITY_REPORT,v 2.12.2.1 2006/04/25 19:48:29 rus Exp $
#
# string library sanity report generator
#

# set the base directory
$basedir = $0;
$basedir =~ s/[^\/]+$//g;
chop($basedir);
$basedir = "." if ($basedir eq "");
chdir($basedir);

# print out help if required and exit
if (($ARGV[0] eq "h") || ($ARGV[0] eq "-h") || ($ARGV[0] =~ /help/)) {
  print STDERR "Usage: $0 [language dir] [language dir] ...\n";
  print STDERR "       no args will generate report for all languages\n";
  exit(0);
}

# load up the languages that a report should be displayed for
if ($#ARGV > -1) {
  # user-specified languages
  foreach $language (@ARGV) {
    next if ($language eq "en");
    push(@languages, $language);
  }
}
else {
  # all languages
  opendir(LANGDIR, "$basedir");
  foreach $name (readdir(LANGDIR)) {
    next unless ($name =~ /^[a-z]/);
    next if ($name eq "en");
    $fullpath = $basedir . "/" . $name;
    next if (-l "$fullpath"); 
    next unless (-d "$fullpath"); 
    next unless (-e "$fullpath/MAINTAINER");
    push(@languages, $name);
  }
  closedir(LANGDIR);
}

# the 'en' set of language files are complete; so compare everything that
# has been requested against those libraries.
parse_library("en");

# parse the libraries in each selected language
foreach $lang (@languages) {
  parse_library($lang);
}

# now build a report
foreach $lang (@languages) {
  build_report($lang);
}

##############################################################################

sub build_report
{
  local($lang) = @_;
  local($lib, %missing, $variable, $cnt, $dc, $line);

  # print some information about the library
  print "\n";
  print "Language:    $lang\n";
  print "Maintainer:  $library{$lang}->{'MAINTAINER'}\n\n";

  # print out a roll call of libraries
  %missing = ();
  foreach $lib (sort(keys(%{$library{'en'}}))) {
    next if ($lib eq "MAINTAINER");
    print "  library $lib ";
    print "." x (20 - length($lib));
    if (defined($library{$lang}->{$lib})) {
      # the library is there
      print " found\n";
    }
    else {
      # the library is there
      print " missing!\n";
      $missing{$lib} = "dau!";  # hashes rule
    }
  }
  print "\n";

  # print out a roll call of missing variables in the libraries 
  foreach $lib (sort(keys(%{$library{'en'}}))) {
    next if ($lib eq "MAINTAINER");
    next if (defined($missing{$lib}));
    print "  " . "-" x 64 . "\n\n";
    print "  library $lib ";
    print "." x (20 - length($lib));
    print " checking variable list integrity:\n\n";
    $cnt = 0;
    foreach $variable (sort(keys(%{$library{'en'}->{$lib}}))) {
      if (!(defined($library{$lang}->{$lib}->{$variable}))) {
        $line = $library{'en'}->{$lib}->{$variable};
        print "    not found: $variable\n";
        print "               (see line $line in strings/en/$lib)\n";
        $cnt++;
      }
    }
    print "\n" if ($cnt > 0);
    $dc = 0;
    foreach $variable (sort(keys(%{$library{$lang}->{$lib}}))) {
      if (!(defined($library{'en'}->{$lib}->{$variable}))) {
        # variable exists here but not in 'en'
        $line = $library{$lang}->{$lib}->{$variable};
        print "    unknown def: $variable\n";
        print "                 (see line $line in strings/$lang/$lib)\n";
        $dc++;
      }
    }
    print "\n" if ($dc > 0);
    if ($cnt == 0) {
      print "    variable definitions are complete for this library\n";
    }
    else {
      print "    $cnt variable defs appear to be missing for this library\n";
    }
    if ($dc != 0) {
      print "    $dc variable defs in this library do not exist in 'en' lib\n";
    }
    print "\n";
  }

  # print a separator if necessary
  print "=" x 78 . "\n" if (keys(%library) > 2);
}

##############################################################################

sub parse_library
{
  local($lib) = @_;
  local($name, $fullpath, $modtime, $linecount, $variable);

  opendir(LANGDIR, "$basedir/$lib");
  foreach $name (readdir(LANGDIR)) {
    $fullpath = $basedir . "/$lib/" . $name;
    next if (-d "$fullpath");
    if ($name eq "MAINTAINER") {
      open(FP, "$fullpath");
      $library{$lib}->{'MAINTAINER'} = <FP>;
      chomp($library{$lib}->{'MAINTAINER'});
      close(FP);
    }
    else {
      $modtime = (stat($fullpath))[9];
      $library{$lib}->{$name}->{'last_modified'} = $modtime;
      if ($name =~ /^[a-z]/) {
        # load up the library and find the string variable names
        $linecount = 0;
        open(FP, "$fullpath");
        while (<FP>) {
          $linecount++;
          if (/^\$([A-Z0-9_]*)[^A-Z0-9_]/) {
            $variable = $1;
            $library{$lib}->{$name}->{$variable} = $linecount;
          }
        }
        close(FP);
      }
    }
  }
  closedir(LANGDIR);
}

##############################################################################
# eof

